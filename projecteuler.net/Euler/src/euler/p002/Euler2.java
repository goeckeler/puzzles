package euler.p002;

import java.math.BigInteger;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * Find the sum of all the even-valued terms in the sequence which do not exceed
 * four million.
 */
public class Euler2 {
	public static void main(String[] args) {
		// the last fibonacci number
		BigInteger fibonacci = BigInteger.ONE;
		// the previous fibonacci number as fib(n) = fib(n-1) + fib(n-2)
		BigInteger fibonacci1 = BigInteger.ONE;;
		
		// the sum of the even valued term 
		BigInteger sum = BigInteger.ZERO;
		
		// each third term is even, we start with an offset of 2 as the next term is even
		int term = 2;
		
		// term is not allowed to exceed 4 mio
		BigInteger limit = BigInteger.valueOf(4000000);
		while (fibonacci.compareTo(limit) < 0) {
			BigInteger fib = fibonacci.add(fibonacci1);
			// add even term
			if (++term % 3 == 0) {
				sum = sum.add(fib);
			}
			fibonacci1 = fibonacci;
			fibonacci = fib;
		}
		// we started with 1, 1, 2, 3 ... so we need to substract the first number
		fibonacci = fibonacci.subtract(BigInteger.ONE);
		
		// so where are we?
		
		System.out.println("fibonacci(" + term + ") = " + fibonacci.add(BigInteger.ONE).toString());
		System.out.println("sum(even terms(fib)) = " + sum.toString());
	}
}